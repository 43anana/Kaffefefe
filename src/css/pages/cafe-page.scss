//CAFE PAGE HEADER --WOHIN?

//CAFE PAGES
.header-cafe {
    width:100%; 
    height:50vh;
    background-image: linear-gradient(rgba(26, 26, 26, 0.3), rgba(26, 26, 26, 0.3)), url(../img/FEND-Coffee-shop-2x.png);
    background-repeat: no-repeat;
    background-size: cover;
    background-position:top;
    display:flex;                  
    flex-direction: column;
    align-items:center;
    justify-content: center;
    @include respond (tablet) {
        width:100%;
        height:60vh; 
        background-position:center;
    }
    @include respond(desk) {
        width:100%;
        height:65vh;//11.97%;//65 vh ..wie oben..i don´t get it.. 681 px von 5688 => 12%
        
    }
}

//CAFE-PAGE CONTENT

.machine-img-box {
    width:70%;
    height:auto;
    margin-left:30%;
    margin-top:10%;
    @include respond (desk) {
      width:50%;
      margin:auto;
    }
}

.gebaeck {
    width:86%;
    margin:10% auto;
    >h3 {
        margin-right:20%;
        margin-bottom:3rem;
    }
    @include respond (desk) {
      width:50%;
      margin:auto;
      padding-bottom:10%; //meistens wenn das padding dann genau ist was sonst die margin ist mache ich das nur um margin:auto schreiben zu können. ich sollte das trotzdem nochmal googlen;-)
        >h3 {
          line-height: 4.9rem;    //wir kommen zurück zur line-height frage..die 1.1%..was sollen die?
        }
    }
}

.gallery {
  display:flex;
  flex-wrap:nowrap;
  justify-content: space-between;
  width:86%;
  margin:auto;
  &__row {
    width:48%;
  }
  &__column{
    margin-bottom:1rem;
  }
  @include respond (desk) {
    margin:0;
  }
}

.gallery {
  width:86%;
  margin:auto;
  display:flex;
  flex-wrap: wrap;
  align-items: flex-start;
  >img {
    width:48%;
    height:auto;
  }
 /* @include respond (tablet) {
    >img {
      width:25%;
    
    &:nth-child(1) {order:1;}
    &:nth-child(2) {order:2;}
    &:nth-child(3) {order:3;}
    &:nth-child(4) {order:8;}
    &:nth-child(5) {order:7;}
    &:nth-child(6) {order:4;}
    &:nth-child(7) {order:5;}
    &:nth-child(8) {order:6;}
    }
  }*/

  @include respond (desk) {
    display:grid;
    grid-template-columns: repeat(4, 1fr); //statt 25% 25% 25% 25%;   sprache: 4 tracks
    grid-template-rows: repeat(4, 15vw);    //falls alle gleich groß sind. falls 1 anders 2 gleich auch mgl: repeat (2, 150px) 200px;
    
    grid-column-gap:2rem;  //gibt für beide grid-gap: 2rem; aber ich brauche individuelle rows
    //fyi: 1 fr = fraction of available space
    //vgl %:  würde zb 50% genau die hälfte des containers nehmen, ua von den gaps, die anderen fr müssten sich den restlichen space teilen
    //ggf. will ich für width bei den rows auch  lieber 1fr nehmen!

    //welchen teiler haben 152,  173 und 308 gemein?  

    &__item {
     /* &:nth-child(1) {order:1;}
      &:nth-child(2) {order:3;}
      &:nth-child(3) {order:7;}
      &:nth-child(4) {order:5;}
      &:nth-child(5) {order:2;}
      &:nth-child(6) {order:8;}
      &:nth-child(7) {order:4;}
      &:nth-child(8) {order:6;}*/

      //ALTERNATIVIDEE: set template row to 5px und mach tausend reihen :D aber auch semi optimal

      &--1 {
        grid-row:1 /2;
        grid-column:1/2;
      }

      &--4 {
        grid-row:2 / span 2;
        grid-column: 1 / 2;
        //margin-top:11px;  //unschön, aber entspricht : diff von 173 und 154 = 9, d.h. 11 px 
      }

      &--5 {
        grid-row:1 / span 2;
        grid-column: 2 / 3;

      }

      &--8 {
        grid-row: 3 / 4;
        grid-column: 2 / 3;
      }

      &--2 {
        grid-row: 1 / 2;
        grid-column: 3 / 4;
      }

      &--3 {
        grid-row:2 / span 2;
        grid-column:3 / 4;
      }

      &--7 {
        grid-row: 1 / span 2;
        grid-column: 4 / 5;
      }

      &--6 {
        grid-row:3/4;
        grid-column:4/5;
      }
    }
    &__item {           // BTW SCHREIBWEISE ANDERS: &>* {  -->bezieht sich auf alle child-elements,cool
      width: 100%;
      height:100%;      //er sagt man muss ne height setzen..also schmetti.. geht auch auto?
      object-fit:cover;
      display:block;      //er sagt sonst haben wir da immer so weiße streifen drunter weil quasi wie wenn text..checke ich aber nicht 


    }
  }
}

/*
    @include respond (phone-land) {
        width:70%;
        margin-left:30%;
        margin-top:10%;
    }
    @include respond (desk) {
        width:50%;
        margin:0;
    }*/
